[comment {--- !doctools ---}]
[comment { support :: kettle io :: }]

This section describes the IO virtualization layer used to decouple
the higher layer's output from the actual destination, terminal or gui
log window.

[list_begin definitions]
[comment {- - -- --- ----- -------- ------------- ---------------------}]
[call [cmd {kettle io}] [method setwidget] [arg w]]

This command sets the text widget to use for output, redirecting all
output made through [cmd {kettle io puts}] and [cmd {kettle io trace}]
from the terminal to this widget.

[comment {- - -- --- ----- -------- ------------- ---------------------}]
[call [cmd {kettle io}] [method for-gui] [arg script]]
[call [cmd {kettle io}] [method for-terminal] [arg script]]

These two command execute the script in their calling context if the
IO system is using text widget or terminal for output, respectively.

[comment {- - -- --- ----- -------- ------------- ---------------------}]
[call [cmd {kettle io}] [method puts] [arg arg]...]

This command is an emulation of Tcl's builtin [cmd puts] which writes
to either a terminal (default), or a text widget. The latter happens
only if such a widget was set with [cmd {kettle io set-widget}].

[para] The full syntax of the builtin [cmd puts] is implemented.

[para] This redirection affects only the standard channels however,
all other channels given to the command will go to their proper files,
sockets, etc.

[comment {- - -- --- ----- -------- ------------- ---------------------}]
[call [cmd {kettle io}] [method trace] [arg text]]

This command is the tracing of kettle internals. It will not produce
output until [cmd {kettle io trace-on}] is invoked.

The specified [arg text] is run through a round of substitution (in
the callers context), resolving variables and commands embedded into
it. This allows the use of brace-quoting, preventing the execution of
such embedded commands while tracing is disabled.

[comment {- - -- --- ----- -------- ------------- ---------------------}]
[call [cmd {kettle io}] [method trace-on]]

This command activates the tracing of internals, enabling
[cmd {kettle io trace}] to produce output.

[comment {- - -- --- ----- -------- ------------- ---------------------}]
[call [cmd {kettle io}] [method {animation begin}]]

This command is the first in a group of four implementing the
foundations for text-based progress bars and the like.

[para] When invoked it initializes the internal state for writing on
the last line of the terminal without moving into the next line. This
sets the maximum column used to [const 0], and the current prefix to
the empty string.

[comment {- - -- --- ----- -------- ------------- ---------------------}]
[call [cmd {kettle io}] [method {animation write}] [arg text]]

This command writes the concatenation of the current prefix and input
[arg text] to the current line, clearing and then overwriting the
previous content of the same line. By writing different texts an
animation effect can be generated, with only the prefix staying
constant. The command takes care to track the largest column
characters have been written to and to clear them even if the current
string does not cover them.

[comment {- - -- --- ----- -------- ------------- ---------------------}]
[call [cmd {kettle io}] [method {animation indent}] [arg text]]

This command extends the current prefix with [arg text]. Nothing else
happens.

[comment {- - -- --- ----- -------- ------------- ---------------------}]
[call [cmd {kettle io}] [method {animation last}] [arg text]]

This command is the last in the group of four handling animation
effects. It first [method write]s the [arg text] as usual and then
moves the terminal to the next line, making [arg text] the last
shown string of the animation and that which is kept shown.

[comment {- - -- --- ----- -------- ------------- ---------------------}]
[call [cmd {kettle io}] [arg tag] [arg script]]

This command activates the color named by [arg tag], then executes the
[arg script] and lastly resets the output to the standard colors.

[para] This means that output generated by IO commands in the script
have the activated color. Note that the command does [emph not]
support the nesting of color activations.

[para] The allowed color tags are:
[list_begin definitions]
[def [const ok]]
[def [const warn]]
[def [const err]]
[def [const note]]
[def [const debug]]
[def [const red]]
[def [const green]]
[def [const yellow]]
[def [const blue]]
[def [const magenta]]
[def [const cyan]]
[def [const white]]
[list_end]

[comment {- - -- --- ----- -------- ------------- ---------------------}]
[call [cmd {kettle io}] m[arg tag] [arg text]]

This command is similar to the previous, except that all color tags
are prefixed with [const m] (for markup) and the argument is a string,
not a script. The string is extended with color control commands
activating and deactivating the chosen color at beginning and end, and
then returned as the result of the command.

[list_end]
