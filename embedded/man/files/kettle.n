'\"
'\" Generated from file '/home/aku/Projects/Kettle/kettle/embedded/man/files/kettle.n' by tcllib/doctools with format 'nroff'
'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id: man.macros,v 1.1 2009/01/30 04:56:47 andreas_kupries Exp $
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH "kettle" n 0 doc "Kettle - The Quick Brew System"
.BS
.SH NAME
kettle \- Kettle - Core
.SH SYNOPSIS
package require \fBTcl  8.5\fR
.sp
\fBkettle tcl\fR
.sp
\fBkettle tclapp\fR \fIpath\fR
.sp
\fBkettle critcl3\fR
.sp
\fBkettle depends-on\fR \fIpath\fR...
.sp
\fBkettle doc-destination\fR \fIpath\fR
.sp
\fBkettle doc\fR ?\fIdocroot\fR?
.sp
\fBkettle figures\fR ?\fIfigroot\fR?
.sp
\fBkettle testsuite\fR ?\fItestroot\fR?
.sp
\fBkettle gui\fR \fBmake\fR
.sp
\fBkettle tool\fR \fBdeclare\fR
.sp
\fBkettle tool\fR \fBget\fR
.sp
\fBkettle\fR \fBinvoke\fR
.sp
\fBkettle option\fR \fBdefine\fR
.sp
\fBkettle option\fR \fBonchange\fR
.sp
\fBkettle option\fR \fBno-work-key\fR
.sp
\fBkettle option\fR \fBexists\fR
.sp
\fBkettle option\fR \fBnames\fR
.sp
\fBkettle option\fR \fBhelp\fR
.sp
\fBkettle option\fR \fBset\fR
.sp
\fBkettle option\fR \fBset-default\fR
.sp
\fBkettle option\fR \fBset!\fR
.sp
\fBkettle option\fR \fBunset\fR
.sp
\fBkettle option\fR \fBget\fR
.sp
\fBkettle option\fR \fBtype\fR
.sp
\fBkettle option\fR \fBsave\fR
.sp
\fBkettle option\fR \fBload\fR
.sp
\fBkettle option\fR \fBconfig\fR
.sp
\fBkettle ovalidate\fR \fBenum\fR
.sp
\fBkettle ovalidate\fR \fBany\fR
.sp
\fBkettle ovalidate\fR \fBstring\fR
.sp
\fBkettle ovalidate\fR \fBboolean\fR
.sp
\fBkettle ovalidate\fR \fBlistsimple\fR
.sp
\fBkettle ovalidate\fR \fBdirectory\fR
.sp
\fBkettle ovalidate\fR \fBreadable.file\fR
.sp
\fBkettle ovalidate\fR \fBpath\fR
.sp
\fBkettle path\fR \fBbench-file\fR \fIpath\fR
.sp
\fBkettle path\fR \fBbindir\fR ?\fIpath\fR?
.sp
\fBkettle path\fR \fBcat\fR \fIpath\fR \fIarg\fR...
.sp
\fBkettle path\fR \fBcathead\fR \fIpath\fR \fIn\fR \fIarg\fR...
.sp
\fBkettle path\fR \fBcopy-file\fR \fIsrc\fR \fIdstdir\fR
.sp
\fBkettle path\fR \fBcopy-files\fR \fIdstdir\fR \fIarg\fR...
.sp
\fBkettle path\fR \fBcritcl3-package-file\fR \fIfile\fR
.sp
\fBkettle path\fR \fBdiagram-file\fR \fIpath\fR
.sp
\fBkettle path\fR \fBdoctools-file\fR \fIpath\fR
.sp
\fBkettle path\fR \fBdry-barrier\fR ?\fIdryscript\fR?
.sp
\fBkettle path\fR \fBexec\fR \fIarg\fR...
.sp
\fBkettle path\fR \fBfixhashbang\fR \fIfile\fR \fIshell\fR
.sp
\fBkettle path\fR \fBforeach-file\fR \fIpath\fR \fIpv\fR \fIscript\fR
.sp
\fBkettle path\fR \fBgrep\fR \fIpattern\fR \fIdata\fR
.sp
\fBkettle path\fR \fBhtmldir\fR ?\fIpath\fR?
.sp
\fBkettle path\fR \fBin\fR \fIpath\fR \fIscript\fR
.sp
\fBkettle path\fR \fBincdir\fR ?\fIpath\fR?
.sp
\fBkettle path\fR \fBinstall-application\fR \fIsrc\fR \fIdstdir\fR
.sp
\fBkettle path\fR \fBinstall-file-group\fR \fIlabel\fR \fIdstdir\fR \fIarg\fR...
.sp
\fBkettle path\fR \fBinstall-file-set\fR \fIlabel\fR \fIdstdir\fR \fIarg\fR...
.sp
\fBkettle path\fR \fBinstall-script\fR \fIsrc\fR \fIdstdir\fR \fIshell\fR
.sp
\fBkettle path\fR \fBkettle-build-file\fR \fIpath\fR
.sp
\fBkettle path\fR \fBlibdir\fR ?\fIpath\fR?
.sp
\fBkettle path\fR \fBmandir\fR ?\fIpath\fR?
.sp
\fBkettle path\fR \fBnorm\fR \fIpath\fR
.sp
\fBkettle path\fR \fBpipe\fR \fIlv\fR \fIscript\fR \fIarg\fR...
.sp
\fBkettle path\fR \fBrelative\fR \fIbase\fR \fIdst\fR
.sp
\fBkettle path\fR \fBrelativecwd\fR \fIdst\fR
.sp
\fBkettle path\fR \fBrelativesrc\fR \fIdst\fR
.sp
\fBkettle path\fR \fBremove-path\fR \fIbase\fR \fIpath\fR
.sp
\fBkettle path\fR \fBremove-paths\fR \fIbase\fR \fIarg\fR...
.sp
\fBkettle path\fR \fBrgrep\fR \fIpattern\fR \fIdata\fR
.sp
\fBkettle path\fR \fBscan\fR \fIlabel\fR \fIroot\fR \fIpredicate\fR
.sp
\fBkettle path\fR \fBscript\fR
.sp
\fBkettle path\fR \fBset-executable\fR \fIpath\fR
.sp
\fBkettle path\fR \fBsourcedir\fR ?\fIpath\fR?
.sp
\fBkettle path\fR \fBstrip\fR \fIpath\fR prefix
.sp
\fBkettle path\fR \fBtcl-package-file\fR \fIfile\fR
.sp
\fBkettle path\fR \fBtcltest-file\fR \fIpath\fR
.sp
\fBkettle path\fR \fBtmpfile\fR ?\fIprefix\fR?
.sp
\fBkettle path\fR \fBuninstall-application\fR \fIsrc\fR \fIdstdir\fR
.sp
\fBkettle path\fR \fBuninstall-file-group\fR \fIlabel\fR \fIdstdir\fR
.sp
\fBkettle path\fR \fBuninstall-file-set\fR \fIlabel\fR \fIdstdir\fR \fIarg\fR...
.sp
\fBkettle path\fR \fBwrite\fR \fIpath\fR \fIcontents\fR \fIarg\fR...
.sp
\fBkettle recipe\fR \fBdefine\fR
.sp
\fBkettle recipe\fR \fBparent\fR
.sp
\fBkettle recipe\fR \fBexists\fR
.sp
\fBkettle recipe\fR \fBnames\fR
.sp
\fBkettle recipe\fR \fBhelp\fR
.sp
\fBkettle recipe\fR \fBrun\fR
.sp
\fBkettle status\fR \fBbegin\fR
.sp
\fBkettle status\fR \fBfail\fR
.sp
\fBkettle status\fR \fBok\fR
.sp
\fBkettle status\fR \fBis\fR
.sp
\fBkettle status\fR \fBsave\fR
.sp
\fBkettle status\fR \fBload\fR
.sp
\fBkettle status\fR \fBclear\fR
.sp
\fBkettle io\fR \fBsetwidget\fR
.sp
\fBkettle io\fR \fBfor-gui\fR
.sp
\fBkettle io\fR \fBfor-terminal\fR
.sp
\fBkettle io\fR \fBputs\fR
.sp
\fBkettle io\fR \fBtrace\fR
.sp
\fBkettle io\fR \fBtrace-on\fR
.sp
\fBkettle io\fR \fBanimation begin\fR
.sp
\fBkettle io\fR \fBanimation write\fR
.sp
\fBkettle io\fR \fBanimation indent\fR
.sp
\fBkettle io\fR \fBanimation last\fR
.sp
\fBkettle io\fR \fBfail\fR
.sp
\fBkettle io\fR \fBok\fR
.sp
\fBkettle io\fR \fBwarn\fR
.sp
\fBkettle io\fR \fBerr\fR
.sp
\fBkettle io\fR \fBnote\fR
.sp
\fBkettle io\fR \fBdebug\fR
.sp
\fBkettle io\fR \fBred\fR
.sp
\fBkettle io\fR \fBgreen\fR
.sp
\fBkettle io\fR \fByellow\fR
.sp
\fBkettle io\fR \fBblue\fR
.sp
\fBkettle io\fR \fBmagenta\fR
.sp
\fBkettle io\fR \fBcyan\fR
.sp
\fBkettle io\fR \fBwhite\fR
.sp
\fBkettle io\fR \fBreset\fR
.sp
\fBkettle io\fR \fBmfail\fR
.sp
\fBkettle io\fR \fBmok\fR
.sp
\fBkettle io\fR \fBmwarn\fR
.sp
\fBkettle io\fR \fBmerr\fR
.sp
\fBkettle io\fR \fBmnote\fR
.sp
\fBkettle io\fR \fBmdebug\fR
.sp
\fBkettle io\fR \fBmred\fR
.sp
\fBkettle io\fR \fBmgreen\fR
.sp
\fBkettle io\fR \fBmyellow\fR
.sp
\fBkettle io\fR \fBmblue\fR
.sp
\fBkettle io\fR \fBmmagenta\fR
.sp
\fBkettle io\fR \fBmcyan\fR
.sp
\fBkettle io\fR \fBmwhite\fR
.sp
\fBkettle io\fR \fBmreset\fR
.sp
\fBlambda\fR
.sp
\fBlambda@\fR
.sp
\fBtry\fR
.sp
\fBkettle strutil\fR \fBindent\fR
.sp
\fBkettle strutil\fR \fBpadl\fR
.sp
\fBkettle strutil\fR \fBpadr\fR
.sp
\fBkettle strutil\fR \fBreflow\fR
.sp
\fBkettle strutil\fR \fBundent\fR
.sp
.BE
.SH DESCRIPTION
.PP
.PP
Welcome to Kettle, a set of packages providing support for writing
build code for Tcl packages.
.PP
Please read the document \fIKettle - Introduction to Kettle\fR,
if you have not done so already, to get an overview of the whole system.
.PP
.SH "BUILD DECLARATIONS"
.TP
\fBkettle tcl\fR
This command declares the presence of one or more Tcl packages in the
package source directory.
.sp
The package source directory is scanned to locate
them. Packages are detected by finding a marker (Tcl command) of the
form
.CS


    package provide NAME VERSION

.CE
.IP
in a file, where both \fBNAME\fR and \fBVERSION\fR must be literal
strings, not commands, nor variable references. It is best recognized
when found alone on its line.
Note that files containing an \fIanti-marker\fR of the form
.CS


    package require critcl

.CE
.IP
are rejected as Tcl packages. Use the command \fBkettle critcl3\fR
to detect such packages, mixing Tcl and C.
In each accepted package file the command further looks for and
recognizes embedded pragmas of the form
.CS

# @owns: PATH
.CE
.IP
which provides kettle with information about files belonging to the
same package without directly providing it. This can be data files, or
other Tcl files sourced by the main package file.
.sp
For each detected package \fBP\fR two recipes are defined, to
install and uninstall this package, namely:
.RS
.TP
\fBinstall-package-\fBP\fR\fR
.TP
\fBuninstall-package-\fBP\fR\fR
.RE
.sp
The command further extends the recipes
.RS
.TP
\fBinstall-tcl-packages\fR
.TP
\fBinstall-packages\fR
.TP
\fBinstall\fR
.TP
\fBuninstall-tcl-packages\fR
.TP
\fBuninstall-packages\fR
.TP
\fBuninstall\fR
.RE
.IP
generating a recipe tree matching
.CS


  install
  -> install-packages
     -> install-tcl-packages
        -> install-app-$path

  uninstall
  -> uninstall-packages
     -> uninstall-tcl-packages
        -> uninstall-app-$path

.CE
.sp
The extended recipes may be created by this process. As other
declarations create similar trees these get merged together, enabling
a user to install parts of the sources at various levels of specifity,
from just a specific package up to all and sundry.
.sp
Tcl packages are installed into the directory specified by
option \fB--lib-dir\fR despite technically not being binary files.
.RS
.TP
\fB--lib-dir\fR path
This configuration option specifies the path to the directory packages
(binary and script) will be installed into.
.sp
The default value is the [\fBinfo library\fR] directory
of the \fBtclsh\fR used to run the \fBkettle\fR application.
.sp
If the option \fB--exec-prefix\fR is modified the default
value changes to "\fI\fB--exec-prefix\fR/lib\fR".
.RE
.sp
To simplify usage the command heuristically detects
documentation and testsuites by means of internally calling the
commands \fBkettle doc\fR and \fBkettle testsuite\fR with default
path arguments ("\fIdoc\fR" and "\fItests\fR" respectively).
.sp
If documentation and/or testsuite are placed in non-standard
locations these commands have to be run before \fBkettle tcl\fR,
with the proper paths.
.sp
If dependencies have been specified, via
\fBkettle depends-on\fR, the package specific install and debug
recipes will recusively invoke install or debug on them before
building the package itself.
.TP
\fBkettle tclapp\fR \fIpath\fR
This command declares the presence of a Tcl script application found
at the \fIpath\fR under the package source directory.
.sp
If the specified application is found the command will define
two recipes to install and uninstall this application, namely:
.RS
.TP
\fBinstall-app-\fIpath\fR\fR
.TP
\fBuninstall-app-\fIpath\fR\fR
.RE
.sp
It will further extend the recipes
.RS
.TP
\fBinstall-tcl-applications\fR
.TP
\fBinstall-applications\fR
.TP
\fBinstall\fR
.TP
\fBuninstall-tcl-applications\fR
.TP
\fBuninstall-applications\fR
.TP
\fBuninstall\fR
.RE
.IP
generating a recipe tree matching
.CS


  install
  -> install-applications
     -> install-tcl-applications
        -> install-app-$path

  uninstall
  -> uninstall-applications
     -> uninstall-tcl-applications
        -> uninstall-app-$path

.CE
.sp
The extended recipes may be created by this process. As other
declarations create similar trees these get merged together, enabling
a user to install parts of the sources at various levels of specifity,
from just a specific application up to all and sundry.
.sp
Script applications are installed into the directory specified
by option \fB--bin-dir\fR despite technically not being binary
files.
.RS
.TP
\fB--bin-dir\fR path
This configuration option specifies the path to the directory
applications (binary and script) will be installed into.
.sp
The default value is the directory of the \fBtclsh\fR used
to run the \fBkettle\fR application.
.sp
If the option \fB--exec-prefix\fR is modified the default
value changes to "\fI\fB--exec-prefix\fR/bin\fR".
.RE
.TP
\fBkettle critcl3\fR
This command declares the presence of one or more critcl-based Tcl
packages in the package source directory, mixing C and Tcl.
.sp
The package source directory is scanned to locate
them. Packages are detected by finding two markers (Tcl commands) in
the file. These markers are of the form
.CS


    package provide NAME VERSION

.CE
.IP
and
.CS


    package require critcl

.CE
.IP
Both \fBNAME\fR and \fBVERSION\fR must be literal strings, not
commands, nor variable references. They are best recognized when found
alone on their respective lines.
.sp
For each detected package \fBP\fR three recipes are defined, to
install and uninstall this package. Installation comes in two
variants, regular and debug:
.RS
.TP
\fBinstall-package-\fBP\fR\fR
.TP
\fBdebug-package-\fBP\fR\fR
.TP
\fBuninstall-package-\fBP\fR\fR
.RE
.sp
The command further extends the recipes
.RS
.TP
\fBinstall-binary-packages\fR
.TP
\fBinstall-packages\fR
.TP
\fBinstall\fR
.TP
\fBdebug-binary-packages\fR
.TP
\fBdebug-packages\fR
.TP
\fBdebug\fR
.TP
\fBuninstall-binary-packages\fR
.TP
\fBuninstall-packages\fR
.TP
\fBuninstall\fR
.RE
.IP
generating a recipe tree matching
.CS


  install
  -> install-packages
     -> install-binary-packages
        -> install-app-$path

  debug
  -> debug-packages
     -> debug-binary-packages
        -> debug-app-$path

  uninstall
  -> uninstall-packages
     -> uninstall-binary-packages
        -> uninstall-app-$path

.CE
.sp
The extended recipes may be created by this process. As other
declarations create similar trees these get merged together, enabling
a user to install parts of the sources at various levels of specifity,
from just a specific package up to all and sundry.
.sp
Critcl-based packages are installed into the directory
specified by option \fB--lib-dir\fR.
Critcl's choice of the target configuration to build for can be
overrriden via option \fB--target\fR.
Kettle's choice of which critcl application to use cane overriden by
option \fB--with-critcl3\fR, except if kettle found a
\fBcritcl\fR package and runs everything itself instead of
invoking critcl child processes.
.RS
.TP
\fB--lib-dir\fR path
This configuration option specifies the path to the directory packages
(binary and script) will be installed into.
.sp
The default value is the [\fBinfo library\fR] directory
of the \fBtclsh\fR used to run the \fBkettle\fR application.
.sp
If the option \fB--exec-prefix\fR is modified the default
value changes to "\fI\fB--exec-prefix\fR/lib\fR".
.TP
\fB--target\fR string
The value of this option is the target name \fBcritcl\fR should use
to build C code.
.sp
The default value is the empty string, leaving the choice of
target to \fBcritcl\fR itself.
.TP
\fB--with-critcl3\fR path
This configuration option specifies the path to the tool
\fBcritcl3\fR for the compilation and installation of critcl-based
C code.
.sp
The default value is the path to the first of
.RS
.IP [1]
"\fIcritcl3\fR",
.IP [2]
"\fIcritcl3.kit\fR",
.IP [3]
"\fIcritcl3.tcl\fR",
.IP [4]
"\fIcritcl3.exe\fR",
.IP [5]
"\fIcritcl\fR",
.IP [6]
"\fIcritcl.kit\fR",
.IP [7]
"\fIcritcl.tcl\fR", and
.IP [8]
"\fIcritcl.exe\fR"
.RE
.IP
found on the \fBPATH\fR. None of these matter however should the
system find the package \fBcritcl\fR version 3 or higher among the
packages known to the \fBtclsh\fR running the \fBkettle\fR
application. In that case kettle will run everything in itself,
without invoking critcl child processes.
.RE
.sp
To simplify usage the command heuristically detects
documentation and testsuites by means of internally calling the
commands \fBkettle doc\fR and \fBkettle testsuite\fR with default
path arguments ("\fIdoc\fR" and "\fItests\fR" respectively).
.sp
If documentation and/or testsuite are placed in non-standard
locations these commands have to be run before \fBkettle critcl3\fR,
with the proper paths.
.sp
If dependencies have been specified, via
\fBkettle depends-on\fR, the package specific install and debug
recipes will recusively invoke install or debug on them before
building the package itself.
.TP
\fBkettle depends-on\fR \fIpath\fR...
This command declares that the current sources depend on the packages
in the specified directories. These are best specified as relative
directories and most useful in package bundles where multiple
dependent packages are managed in a single source repository.
.sp
The arguments can be paths to files too. In that case the files
are assumed to be the build declaration files of the required packages
in question. In case of a directory path kettle will search for the
build declaration file it needs.
This information is currently only used by the package-specific
"install" and "debug" recipes generated by the kettle commands
\fBkettle tcl\fR and \fBkettle critcl\fR.
.TP
\fBkettle doc-destination\fR \fIpath\fR
The "doc" recipe generated by the \fBkettle doc\fR command (see
below) saves the conversion results into the sub-directory specified
by option \fB--with-doc-destination\fR.
.sp
This command declares that the results should be put into the
specified non-standard \fIpath\fR instead of the default of
"\fIembedded\fR".
To take effect it has to be run \fIbefore\fR \fBkettle doc\fR is
run.
\fINote\fR that the user is still able to override with by setting
\fB--with-doc-destination\fR on the command line.
.RS
.TP
\fB--with-doc-destination\fR path
This configuration option specifies the path to the directory the
generated documentation should be placed into for the documentation
installa recipes to pick up from.
.sp
This should be a relative path, which will interpreted relative
to the package source directory.
.sp
The default value is "\fIembedded\fR".
.sp
A build declaration file can override this default with the
\fBkettle doc-destination\fR command.
.RE
.TP
\fBkettle doc\fR ?\fIdocroot\fR?
This command declares the presence of \fBdoctools\fR-based
documentation files under the directory \fIdocroot\fR, which is a path
relative to the source directory.
.sp
If not specified \fIdocroot\fR defaults to "\fIdoc\fR".
.sp
While this command can be invoked multiple times, only the
first invokation will have an effect. Every invokation after that is
ignored.
The commands \fBkettle tcl\fR and \fBkettle critcl3\fR run this
command implicitly, with the default paths.
This means that if documentation is stored in a non-standard location
\fBkettle doc\fR must be run explicitly before them, with the proper path.
.sp
The package documentation directory is scanned to locate the
documentation files. They are recognized by containing any of the
marker strings
.RS
.IP \(bu
"\fB[manpage_begin\fR"
.IP \(bu
"\fB--- doctools ---\fR"
.IP \(bu
"\fBtcl.tk//DSL doctools//EN//\fR"
.RE
.IP
in their first 1024 characters. Possible documentation files are
rejected should they contain any of the anti-markers
.RS
.IP \(bu
"\fB--- !doctools ---\fR"
.IP \(bu
"\fB!tcl.tk//DSL doctools//EN//\fR"
.RE
.IP
in their first 1024 characters. This last is necessary as doctools
include file feature allows the actual document content to start in an
include file which cannot operate without being includes from a master
file configuring it.
.sp
When documentation files are found the command will define
recipes to convert the documentation into manpages and HTML files,
plus recipes install the conversion results. The conversion results
themselves are stored as specified by \fBkettle doc-destination\fR
(see above) and associated options.
.RS
.TP
\fBdoc\fR
.TP
\fBinstall-doc-html\fR
.TP
\fBinstall-doc-manpages\fR
.TP
\fBuninstall-doc-html\fR
.TP
\fBuninstall-doc-manpages\fR
.RE
.sp
The command further extends the recipes
.RS
.TP
\fBinstall-doc\fR
.TP
\fBinstall\fR
.TP
\fBuninstall-doc\fR
.TP
\fBuninstall\fR
.RE
.IP
generating a recipe tree matching
.CS


  install
  -> install-doc
     -> install-doc-html
     -> install-doc-manpages

  uninstall
  -> uninstall-doc
     -> uninstall-doc-html
     -> uninstall-doc-manpages

.CE
.sp
The extended recipes may be created by this process. As other
declarations create similar trees these get merged together, enabling
a user to install parts of the sources at various levels of specifity,
from just a specific type of documentation up to all and sundry.
.sp
HTML documentation is stored under the directory specified by
option \fB--html-dir\fR.
Manpages are stored under the directory specified by
option \fB--man-dir\fR.
The "doc" recipe uses the \fBdtplite\fR application to perform the
various conversions.
.RS
.TP
\fB--html-dir\fR path
This configuration option specifies the path to the directory package
documentation in HTML format will be installed into.
.sp
The default value is "\fI\fB--prefix\fR/html\fR".
.TP
\fB--man-dir\fR path
This configuration option specifies the path to the directory package
documentation (manpages, in *roff format) will be installed into.
.sp
The default value is "\fI\fB--prefix\fR/man\fR".
.TP
\fB--with-dtplite\fR path
This configuration option specifies the path to the tool
\fBdtplite\fR for doctools-based documentation processing.
.sp
The default value is the path to the first of
"\fIdtplite\fR",
"\fIdtplite.kit\fR",
"\fIdtplite.tcl\fR", and
"\fIdtplite.exe\fR"
found on the \fBPATH\fR.
.RE
.sp
To simplify usage the command heuristically detects
tklib/diagram based figures by means of internally calling the command
\fBkettle figures\fR with default path arguments
("\fI\fBdoc-sources\fR/figures}\fR".
.sp
If the figures are placed in a non-standard location this
command has to be run before \fBkettle doc\fR, with the proper
paths.
.TP
\fBkettle figures\fR ?\fIfigroot\fR?
This command declares the presence of \fBdiagram\fR-based figures
under the directory \fIfigroot\fR, which is a path relative to the
source directory.
.sp
If not specified \fIfigroot\fR defaults to "\fIdoc/figures\fR".
.sp
While this command can be invoked multiple times, only the
first invokation will have an effect. Every invokation after that is
ignored.
The command \fBkettle doc\fR (and indirectly \fBkettle tcl\fR and
\fBkettle critcl3\fR) runs this command implicitly, with the default
paths.
This means that if diagrams are stored in a non-standard location
\fBkettle figures\fR must be run explicitly before them, with the
proper path.
.sp
The package diagram directory is scanned to locate the diagram
files. They are recognized by containing the marker string
.RS
.IP \(bu
"\fBtcl.tk//DSL diagram//EN//\fR"
.RE
.IP
in their first 1024 characters.
.sp
When diagram files are found the command will define recipes to
convert the diagrams into PNG raster images (saved as siblings to
their source files), and to render the diagrams on a Tk canvas.
.RS
.TP
\fBfigures\fR
.TP
\fBshow-figures\fR
.RE
.sp
The recipes use the \fBdia\fR application (of \fBtklib\fR)
to perform the conversions, and GUI rendering.
.RS
.TP
\fB--with-dia\fR path
This configuration option specifies the path to the tool
\fBdia\fR for tklib/diagram-based diagram processing.
.sp
The default value is the path to the first of
"\fIdia\fR",
"\fIdia.kit\fR",
"\fIdia.tcl\fR", and
"\fIdia.exe\fR"
found on the \fBPATH\fR.
.RE
.TP
\fBkettle testsuite\fR ?\fItestroot\fR?
This command declares the presence of a \fBtcltest\fR-based
testsuite under the directory \fItestroot\fR, which is a path relative
to the source directory.
.sp
If not specified \fItestroot\fR defaults to "\fItests\fR".
.sp
While this command can be invoked multiple times, only the
first invokation will have an effect. Every invokation after that is
ignored.
The commands \fBkettle tcl\fR and \fBkettle critcl3\fR) run this
command implicitly, with the default paths.
This means that if a testsuite is stored in a non-standard location
\fBkettle testsuite\fR must be run explicitly before them, with the
proper path.
.sp
The package testsuite directory is scanned to locate the test
files. They are recognized by containing the marker string
.RS
.IP \(bu
"\fBtcl.tk//DSL tcltest//EN//\fR"
.RE
.IP
in their first 1024 characters.
.sp
When testsuites are found the command will define a recipe to
run them. This recipe will recursively invoke the recipes "debug" (or
"install" if the former does not exist, or fails) before performing
the tests, installing the package under test (and its dependencies) in
a local directory for use by the testsuites. The supporting commands
provided by kettle (see \fIKettle - Testsuite Support\fR) know how
to use this.
.RS
.TP
\fBtest\fR
.RE
.sp
The verbosity of testsuite output to the terminal is specified
by the option \fB--log-mode\fR.
The ability to save testsuite output to a series of files is specified
by the option \fB--log\fR.
The tclsh shell used for running the testsuites is specified by option
\fB--with-shell\fR.
.RS
.TP
\fB--log-mode\fR compact|full
An option for recipe 'test', if defined. Its value determines the
verbosity of test suite information printed to the terminal or log window.
.sp
The default is \fBcompact\fR.
.TP
\fB--log\fR path
An option for recipe 'test', if defined. Its value is the path "stem"
for a series of files testsuite information is saved into. The actual
files use the specified stem and add their specifc file extension to
it.
.sp
The default is the empty string, disabling the saving of
testsuite information.
.TP
\fB--with-shell\fR path
.RE
.PP
.SH "GRAPHICAL INTERFACE SUPPORT"
This layer contains the command for the creation of the standard
graphical interface to the system.
.TP
\fBkettle gui\fR \fBmake\fR
.PP
.SH "TOOL HANDLING"
This layer contains commands to manage the declaration of a dependency
on external comands, and their use.
.TP
\fBkettle tool\fR \fBdeclare\fR
.TP
\fBkettle tool\fR \fBget\fR
.PP
.SH "RECURSIVE INVOKATIONS"
The commands of this layer enable recipes to recursively invoke other
recipes, for the current and in other packages.
.TP
\fBkettle\fR \fBinvoke\fR
.PP
.SH "OPTION DATABASE"
This layer manages the option database, which both holds the
configuration options, their definitions and values, as also named
shared global state.
.TP
\fBkettle option\fR \fBdefine\fR
.TP
\fBkettle option\fR \fBonchange\fR
.TP
\fBkettle option\fR \fBno-work-key\fR
.TP
\fBkettle option\fR \fBexists\fR
.TP
\fBkettle option\fR \fBnames\fR
.TP
\fBkettle option\fR \fBhelp\fR
.TP
\fBkettle option\fR \fBset\fR
.TP
\fBkettle option\fR \fBset-default\fR
.TP
\fBkettle option\fR \fBset!\fR
.TP
\fBkettle option\fR \fBunset\fR
.TP
\fBkettle option\fR \fBget\fR
.TP
\fBkettle option\fR \fBtype\fR
.TP
\fBkettle option\fR \fBsave\fR
.TP
\fBkettle option\fR \fBload\fR
.TP
\fBkettle option\fR \fBconfig\fR
.PP
.SH "OPTION TYPES AND VALIDATION"
This layer defines the validation types usable by the options.
.TP
\fBkettle ovalidate\fR \fBenum\fR
.TP
\fBkettle ovalidate\fR \fBany\fR
.TP
\fBkettle ovalidate\fR \fBstring\fR
.TP
\fBkettle ovalidate\fR \fBboolean\fR
.TP
\fBkettle ovalidate\fR \fBlistsimple\fR
.TP
\fBkettle ovalidate\fR \fBdirectory\fR
.TP
\fBkettle ovalidate\fR \fBreadable.file\fR
.TP
\fBkettle ovalidate\fR \fBpath\fR
.PP
.SH "PATH UTILITIES"
This layer contains the commands ...
.TP
\fBkettle path\fR \fBbench-file\fR \fIpath\fR
.TP
\fBkettle path\fR \fBbindir\fR ?\fIpath\fR?
.TP
\fBkettle path\fR \fBcat\fR \fIpath\fR \fIarg\fR...
.TP
\fBkettle path\fR \fBcathead\fR \fIpath\fR \fIn\fR \fIarg\fR...
.TP
\fBkettle path\fR \fBcopy-file\fR \fIsrc\fR \fIdstdir\fR
.TP
\fBkettle path\fR \fBcopy-files\fR \fIdstdir\fR \fIarg\fR...
.TP
\fBkettle path\fR \fBcritcl3-package-file\fR \fIfile\fR
.TP
\fBkettle path\fR \fBdiagram-file\fR \fIpath\fR
.TP
\fBkettle path\fR \fBdoctools-file\fR \fIpath\fR
.TP
\fBkettle path\fR \fBdry-barrier\fR ?\fIdryscript\fR?
.TP
\fBkettle path\fR \fBexec\fR \fIarg\fR...
.TP
\fBkettle path\fR \fBfixhashbang\fR \fIfile\fR \fIshell\fR
.TP
\fBkettle path\fR \fBforeach-file\fR \fIpath\fR \fIpv\fR \fIscript\fR
.TP
\fBkettle path\fR \fBgrep\fR \fIpattern\fR \fIdata\fR
.TP
\fBkettle path\fR \fBhtmldir\fR ?\fIpath\fR?
.TP
\fBkettle path\fR \fBin\fR \fIpath\fR \fIscript\fR
.TP
\fBkettle path\fR \fBincdir\fR ?\fIpath\fR?
.TP
\fBkettle path\fR \fBinstall-application\fR \fIsrc\fR \fIdstdir\fR
.TP
\fBkettle path\fR \fBinstall-file-group\fR \fIlabel\fR \fIdstdir\fR \fIarg\fR...
.TP
\fBkettle path\fR \fBinstall-file-set\fR \fIlabel\fR \fIdstdir\fR \fIarg\fR...
.TP
\fBkettle path\fR \fBinstall-script\fR \fIsrc\fR \fIdstdir\fR \fIshell\fR
.TP
\fBkettle path\fR \fBkettle-build-file\fR \fIpath\fR
.TP
\fBkettle path\fR \fBlibdir\fR ?\fIpath\fR?
.TP
\fBkettle path\fR \fBmandir\fR ?\fIpath\fR?
.TP
\fBkettle path\fR \fBnorm\fR \fIpath\fR
.TP
\fBkettle path\fR \fBpipe\fR \fIlv\fR \fIscript\fR \fIarg\fR...
.TP
\fBkettle path\fR \fBrelative\fR \fIbase\fR \fIdst\fR
.TP
\fBkettle path\fR \fBrelativecwd\fR \fIdst\fR
.TP
\fBkettle path\fR \fBrelativesrc\fR \fIdst\fR
.TP
\fBkettle path\fR \fBremove-path\fR \fIbase\fR \fIpath\fR
.TP
\fBkettle path\fR \fBremove-paths\fR \fIbase\fR \fIarg\fR...
.TP
\fBkettle path\fR \fBrgrep\fR \fIpattern\fR \fIdata\fR
.TP
\fBkettle path\fR \fBscan\fR \fIlabel\fR \fIroot\fR \fIpredicate\fR
.TP
\fBkettle path\fR \fBscript\fR
.TP
\fBkettle path\fR \fBset-executable\fR \fIpath\fR
.TP
\fBkettle path\fR \fBsourcedir\fR ?\fIpath\fR?
.TP
\fBkettle path\fR \fBstrip\fR \fIpath\fR prefix
.TP
\fBkettle path\fR \fBtcl-package-file\fR \fIfile\fR
.TP
\fBkettle path\fR \fBtcltest-file\fR \fIpath\fR
.TP
\fBkettle path\fR \fBtmpfile\fR ?\fIprefix\fR?
.TP
\fBkettle path\fR \fBuninstall-application\fR \fIsrc\fR \fIdstdir\fR
.TP
\fBkettle path\fR \fBuninstall-file-group\fR \fIlabel\fR \fIdstdir\fR
.TP
\fBkettle path\fR \fBuninstall-file-set\fR \fIlabel\fR \fIdstdir\fR \fIarg\fR...
.TP
\fBkettle path\fR \fBwrite\fR \fIpath\fR \fIcontents\fR \fIarg\fR...
.PP
.SH "RECIPE DATABASE"
This layer contains the commands managing the database of all known
recipes, ready for execution.
.TP
\fBkettle recipe\fR \fBdefine\fR
.TP
\fBkettle recipe\fR \fBparent\fR
.TP
\fBkettle recipe\fR \fBexists\fR
.TP
\fBkettle recipe\fR \fBnames\fR
.TP
\fBkettle recipe\fR \fBhelp\fR
.TP
\fBkettle recipe\fR \fBrun\fR
.PP
.SH "STATUS MANAGEMENT"
The command of this layer manage the status of the currently executing
recipe and the database holding the knowledge about all executed
recipes, keyed by their name, location and relevant configuration.
This database is shared among instances of kettle during recursive
invokation.
.TP
\fBkettle status\fR \fBbegin\fR
.TP
\fBkettle status\fR \fBfail\fR
.TP
\fBkettle status\fR \fBok\fR
.TP
\fBkettle status\fR \fBis\fR
.TP
\fBkettle status\fR \fBsave\fR
.TP
\fBkettle status\fR \fBload\fR
.TP
\fBkettle status\fR \fBclear\fR
.PP
.SH "IO VIRTUALIZATION"
This section describes the IO virtualization layer used to decouple
the higher layer's output from the actual destination, terminal or gui
log window.
.TP
\fBkettle io\fR \fBsetwidget\fR
.TP
\fBkettle io\fR \fBfor-gui\fR
.TP
\fBkettle io\fR \fBfor-terminal\fR
.TP
\fBkettle io\fR \fBputs\fR
.TP
\fBkettle io\fR \fBtrace\fR
.TP
\fBkettle io\fR \fBtrace-on\fR
.TP
\fBkettle io\fR \fBanimation begin\fR
.TP
\fBkettle io\fR \fBanimation write\fR
.TP
\fBkettle io\fR \fBanimation indent\fR
.TP
\fBkettle io\fR \fBanimation last\fR
.TP
\fBkettle io\fR \fBfail\fR
.TP
\fBkettle io\fR \fBok\fR
.TP
\fBkettle io\fR \fBwarn\fR
.TP
\fBkettle io\fR \fBerr\fR
.TP
\fBkettle io\fR \fBnote\fR
.TP
\fBkettle io\fR \fBdebug\fR
.TP
\fBkettle io\fR \fBred\fR
.TP
\fBkettle io\fR \fBgreen\fR
.TP
\fBkettle io\fR \fByellow\fR
.TP
\fBkettle io\fR \fBblue\fR
.TP
\fBkettle io\fR \fBmagenta\fR
.TP
\fBkettle io\fR \fBcyan\fR
.TP
\fBkettle io\fR \fBwhite\fR
.TP
\fBkettle io\fR \fBreset\fR
.TP
\fBkettle io\fR \fBmfail\fR
.TP
\fBkettle io\fR \fBmok\fR
.TP
\fBkettle io\fR \fBmwarn\fR
.TP
\fBkettle io\fR \fBmerr\fR
.TP
\fBkettle io\fR \fBmnote\fR
.TP
\fBkettle io\fR \fBmdebug\fR
.TP
\fBkettle io\fR \fBmred\fR
.TP
\fBkettle io\fR \fBmgreen\fR
.TP
\fBkettle io\fR \fBmyellow\fR
.TP
\fBkettle io\fR \fBmblue\fR
.TP
\fBkettle io\fR \fBmmagenta\fR
.TP
\fBkettle io\fR \fBmcyan\fR
.TP
\fBkettle io\fR \fBmwhite\fR
.TP
\fBkettle io\fR \fBmreset\fR
.PP
.SH "GENERAL UTILITIES"
This, the lowest layer of the system contains general utility commands
for string processing, anonymous procedures and error handling.
.SS "ANONYMOUS PROCEDURES"
.TP
\fBlambda\fR
.TP
\fBlambda@\fR
.PP
.SS "ERROR HANDLING"
.TP
\fBtry\fR
.PP
.SS "STRING PROCESSING"
.TP
\fBkettle strutil\fR \fBindent\fR
.TP
\fBkettle strutil\fR \fBpadl\fR
.TP
\fBkettle strutil\fR \fBpadr\fR
.TP
\fBkettle strutil\fR \fBreflow\fR
.TP
\fBkettle strutil\fR \fBundent\fR
.PP
.SH LICENSE
This package, written by Andreas Kupries, is BSD licensed.
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems.
Please report such at the
\fIKettle Tracker\fR [https://chiselapp.com/user/andreas_kupries/repository/Kettle/index].
Please also report any ideas for enhancements you may have for either
package and/or documentation.
.SH KEYWORDS
build tea
.SH CATEGORY
Build support